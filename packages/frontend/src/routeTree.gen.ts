/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as LegalIndexImport } from './routes/legal/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AuthSuccessImport } from './routes/auth/success'
import { Route as ProfileSecurityIndexImport } from './routes/profile/security/index'
import { Route as AdminUsersIndexImport } from './routes/admin/users/index'
import { Route as AdminSettingsIndexImport } from './routes/admin/settings/index'
import { Route as AdminLogsIndexImport } from './routes/admin/logs/index'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const LegalIndexRoute = LegalIndexImport.update({
  id: '/legal/',
  path: '/legal/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AuthSuccessRoute = AuthSuccessImport.update({
  id: '/auth/success',
  path: '/auth/success',
  getParentRoute: () => rootRoute,
} as any)

const ProfileSecurityIndexRoute = ProfileSecurityIndexImport.update({
  id: '/profile/security/',
  path: '/profile/security/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersIndexRoute = AdminUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminSettingsIndexRoute = AdminSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AdminRoute,
} as any)

const AdminLogsIndexRoute = AdminLogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/auth/success': {
      id: '/auth/success'
      path: '/auth/success'
      fullPath: '/auth/success'
      preLoaderRoute: typeof AuthSuccessImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/legal/': {
      id: '/legal/'
      path: '/legal'
      fullPath: '/legal'
      preLoaderRoute: typeof LegalIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/logs/': {
      id: '/admin/logs/'
      path: '/logs'
      fullPath: '/admin/logs'
      preLoaderRoute: typeof AdminLogsIndexImport
      parentRoute: typeof AdminImport
    }
    '/admin/settings/': {
      id: '/admin/settings/'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsIndexImport
      parentRoute: typeof AdminImport
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexImport
      parentRoute: typeof AdminImport
    }
    '/profile/security/': {
      id: '/profile/security/'
      path: '/profile/security'
      fullPath: '/profile/security'
      preLoaderRoute: typeof ProfileSecurityIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminLogsIndexRoute: typeof AdminLogsIndexRoute
  AdminSettingsIndexRoute: typeof AdminSettingsIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminLogsIndexRoute: AdminLogsIndexRoute,
  AdminSettingsIndexRoute: AdminSettingsIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth/success': typeof AuthSuccessRoute
  '/admin/': typeof AdminIndexRoute
  '/legal': typeof LegalIndexRoute
  '/login': typeof LoginIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/admin/logs': typeof AdminLogsIndexRoute
  '/admin/settings': typeof AdminSettingsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/profile/security': typeof ProfileSecurityIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/success': typeof AuthSuccessRoute
  '/admin': typeof AdminIndexRoute
  '/legal': typeof LegalIndexRoute
  '/login': typeof LoginIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/admin/logs': typeof AdminLogsIndexRoute
  '/admin/settings': typeof AdminSettingsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/profile/security': typeof ProfileSecurityIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth/success': typeof AuthSuccessRoute
  '/admin/': typeof AdminIndexRoute
  '/legal/': typeof LegalIndexRoute
  '/login/': typeof LoginIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/admin/logs/': typeof AdminLogsIndexRoute
  '/admin/settings/': typeof AdminSettingsIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
  '/profile/security/': typeof ProfileSecurityIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/auth/success'
    | '/admin/'
    | '/legal'
    | '/login'
    | '/profile'
    | '/admin/logs'
    | '/admin/settings'
    | '/admin/users'
    | '/profile/security'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/success'
    | '/admin'
    | '/legal'
    | '/login'
    | '/profile'
    | '/admin/logs'
    | '/admin/settings'
    | '/admin/users'
    | '/profile/security'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/auth/success'
    | '/admin/'
    | '/legal/'
    | '/login/'
    | '/profile/'
    | '/admin/logs/'
    | '/admin/settings/'
    | '/admin/users/'
    | '/profile/security/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthSuccessRoute: typeof AuthSuccessRoute
  LegalIndexRoute: typeof LegalIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  ProfileSecurityIndexRoute: typeof ProfileSecurityIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthSuccessRoute: AuthSuccessRoute,
  LegalIndexRoute: LegalIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  ProfileSecurityIndexRoute: ProfileSecurityIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/auth/success",
        "/legal/",
        "/login/",
        "/profile/",
        "/profile/security/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/",
        "/admin/logs/",
        "/admin/settings/",
        "/admin/users/"
      ]
    },
    "/auth/success": {
      "filePath": "auth/success.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/legal/": {
      "filePath": "legal/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx"
    },
    "/admin/logs/": {
      "filePath": "admin/logs/index.tsx",
      "parent": "/admin"
    },
    "/admin/settings/": {
      "filePath": "admin/settings/index.tsx",
      "parent": "/admin"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.tsx",
      "parent": "/admin"
    },
    "/profile/security/": {
      "filePath": "profile/security/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
