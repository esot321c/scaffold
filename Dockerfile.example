# Dockerfile.example

# Base image with pnpm
FROM node:24-alpine AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable && corepack prepare pnpm@10.6.5 --activate

# Build stage - builds both packages
FROM base AS builder
WORKDIR /app

# Copy package definitions first for better caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/backend/package.json ./packages/backend/
COPY packages/frontend/package.json ./packages/frontend/
COPY packages/types/package.json ./packages/types/

# Install dependencies
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build packages
RUN pnpm run build

# Backend production image
FROM node:24-alpine AS backend
WORKDIR /app

# Copy runtime dependencies and build artifacts
COPY --from=builder /app/package.json ./
COPY --from=builder /app/packages/backend/package.json ./packages/backend/
COPY --from=builder /app/packages/backend/dist ./packages/backend/dist/
COPY --from=builder /app/packages/backend/prisma ./packages/backend/prisma/
COPY --from=builder /app/packages/backend/node_modules ./packages/backend/node_modules/
COPY --from=builder /app/packages/types ./packages/types/

# Set production environment
ENV NODE_ENV=production
ENV PORT=3001
WORKDIR /app/packages/backend

# Expose port and run application
EXPOSE 3001
CMD ["node", "dist/main.js"]

# Frontend production image
FROM node:24-alpine AS frontend
WORKDIR /app

# Copy build output
COPY --from=builder /app/packages/frontend/dist ./dist/

# Install serve for static file serving
RUN npm install -g serve

# Expose port and run application
ENV PORT=3000
EXPOSE 3000
CMD ["serve", "-s", "dist"]